#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Espresso - Experimental Safety and Stability Procedure with Runtime Endofunctori
al Superior System Operation
\end_layout

\begin_layout Author
Bryan Eastwood, Ethan Sattler, Niles Rogoff
\end_layout

\begin_layout Date
December 15th, 2015
\end_layout

\begin_layout Standard
Espresso is a web framework designed with the purpose of experimenting with
 the application of functional, typesafe programming concepts to Java.
\end_layout

\begin_layout Standard
Java is inherently non-typesafe for several reasons, but the most predominant
 one by far is the fact that a variable of any type can either be that type
 or null.
 A method that expects a type 
\begin_inset Formula $T$
\end_inset

 does not necessarily contain code to handle a null value, and yet the compiler
 will allow code that calls this method on values that can be null.
\end_layout

\begin_layout Standard
In order to solve this problem, we borrowed a concept from Haskell used
 (for our purposes) to represent missing values or failed computations.
 This concept is the Maybe Functor, which is a type with a constructor defined
 as, given a type 
\begin_inset Formula $a$
\end_inset

: 
\begin_inset Formula $Just\left(a\right)$
\end_inset

 
\begin_inset Formula $\lor$
\end_inset

 
\begin_inset Formula $Nothing$
\end_inset

.
 This definition means that given a type Maybe 
\begin_inset Formula $a$
\end_inset

, we can have a type that is not 
\begin_inset Formula $a$
\end_inset

, but rather 
\emph on
contains
\emph default
 
\begin_inset Formula $a$
\end_inset

, or a constant value 
\begin_inset Formula $Nothing$
\end_inset

.
 Values inside of a Maybe Functor may have functions mapped to them via
 
\begin_inset Formula $fmap$
\end_inset

.
 It's definition is as follows:
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $fmap(f,Just(x))\equiv Just(f(x))$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $fmap(f,Nothing)\equiv Nothing$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
For example, if we had a method to get the index of an element in an array,
 where the array was not guaranteed to contain that element, we would return
 a type Maybe<Integer>, thus eliminating the possibility of a runtime type
 error.
\end_layout

\end_body
\end_document
